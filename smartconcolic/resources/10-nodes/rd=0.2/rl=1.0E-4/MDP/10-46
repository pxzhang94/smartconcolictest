mdp

module translatedMDP

s : [0..3] init 0;

[rt] s=2 -> 0.9992:(s'=3)+8.0E-4:(s'=2);
[se01] s=2 -> 0.9992:(s'=3)+8.0E-4:(s'=2);
[se012] s=2 -> 0.9992:(s'=3)+8.0E-4:(s'=2);
[se0123] s=2 -> 0.9992:(s'=3)+8.0E-4:(s'=2);
[se01234] s=2 -> 0.9992:(s'=3)+8.0E-4:(s'=2);
[se012345] s=2 -> 0.9992:(s'=3)+8.0E-4:(s'=2);
[se0123456] s=2 -> 1 :(s'=2);
[se0123457] s=2 -> 1 :(s'=2);
[se01234578] s=2 -> 1 :(s'=2);
[se012345789] s=2 -> 1 :(s'=2);

[rt] s=1 -> 0.9992:(s'=1)+8.0E-4:(s'=3);
[se01] s=1 -> 0.9992:(s'=1)+8.0E-4:(s'=3);
[se012] s=1 -> 0.9992:(s'=1)+8.0E-4:(s'=3);
[se0123] s=1 -> 0.9992:(s'=1)+8.0E-4:(s'=3);
[se01234] s=1 -> 0.9992:(s'=1)+8.0E-4:(s'=3);
[se012345] s=1 -> 0.9992:(s'=1)+8.0E-4:(s'=3);
[se0123456] s=1 -> 1 :(s'=1);
[se0123457] s=1 -> 1 :(s'=1);
[se01234578] s=1 -> 1 :(s'=1);
[se012345789] s=1 -> 1 :(s'=1);

[rt] s=0 -> 0.9992:(s'=1)+8.0E-4:(s'=2);
[se01] s=0 -> 0.9992:(s'=1)+8.0E-4:(s'=2);
[se012] s=0 -> 0.9992:(s'=1)+8.0E-4:(s'=2);
[se0123] s=0 -> 0.9992:(s'=1)+8.0E-4:(s'=2);
[se01234] s=0 -> 0.9992:(s'=1)+8.0E-4:(s'=2);
[se012345] s=0 -> 0.9992:(s'=1)+8.0E-4:(s'=2);
[se0123456] s=0 -> 1 :(s'=0);
[se0123457] s=0 -> 1 :(s'=0);
[se01234578] s=0 -> 1 :(s'=0);
[se012345789] s=0 -> 1 :(s'=0);

[rt] s=3 -> 1 :(s'=3);
[se01] s=3 -> 1 :(s'=3);
[se012] s=3 -> 1 :(s'=3);
[se0123] s=3 -> 1 :(s'=3);
[se01234] s=3 -> 1 :(s'=3);
[se012345] s=3 -> 1 :(s'=3);
[se0123456] s=3 -> 1 :(s'=3);
[se0123457] s=3 -> 1 :(s'=3);
[se01234578] s=3 -> 1 :(s'=3);
[se012345789] s=3 -> 1 :(s'=3);

endmodule

rewards
[rt] true : 1;
[se01] true : 842.0;
[se012] true : 1051.0;
[se0123] true : 1573.0;
[se01234] true : 2152.0;
[se012345] true : 2489.0;
[se0123456] true : 3389.0;
[se0123457] true : 2783.0;
[se01234578] true : 2879.0;
[se012345789] true : 3662.0;
endrewards

label "covered" = s = 3;
